// Generated by CoffeeScript 1.6.3
var FeedCtrl, app;

app = angular.module('app', []);

app.directive('fitlerlink', function() {
  return {
    restrict: 'A',
    scope: true,
    link: function(scope, element, attributes) {
      return element.bind('click', function() {
        $('.filter_link').each(function(i, k) {
          return $(k).removeClass('selected');
        });
        return element.addClass('selected');
      });
    }
  };
});

FeedCtrl = function($scope) {
  var get_page, obj, paginator, per_page, set_page;
  $scope.feeds = [];
  $scope.sites = [];
  $scope.selectedIndex = 0;
  $scope.unread = 0;
  $scope.today = 0;
  $scope.starred = 0;
  $scope.current_item = null;
  $scope.selected_site = null;
  $scope.app_loading = true;
  $scope.list = [];
  $scope.page = 1;
  $scope.channel = 'all';
  per_page = 20;
  paginator = {};
  $scope.safeApply = function(fn) {
    var phase;
    phase = this.$root.$$phase;
    if (phase === "$apply" || phase === "$digest") {
      if (fn && (typeof fn === "function")) {
        return fn();
      }
    } else {
      return this.$apply(fn);
    }
  };
  $scope.change_current = function(item, ind) {
    var feedItem;
    if (item.content != null) {
      item.display = decodeURIComponent(window.atob(item.content));
    } else {
      item.display = decodeURIComponent(window.atob(item.description));
    }
    item.display_date = moment(item.updated).format("MMMM Do YYYY, h:mm:ss a");
    $scope.selectedIndex = ind;
    feedItem = FeedItem.findByAttribute('link', item.link);
    if ((feedItem != null) && feedItem.read === false) {
      item.read = true;
      feedItem.read = true;
      feedItem.save();
      $scope.unread = $scope.unread ? $scope.unread - 1 : 0;
    }
    return $scope.current_item = item;
  };
  $scope.load = function() {
    var feed, i, s, site, t, time, u, _i, _j, _len, _len1, _ref, _ref1;
    console.log("loading");
    $scope.feeds = [];
    $scope.sites = [];
    i = 0;
    u = 0;
    t = 0;
    s = 0;
    _ref = FeedSite.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      site = _ref[_i];
      $scope.sites.push(site);
    }
    _ref1 = FeedItem.all();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      feed = _ref1[_j];
      time = moment().format('YYYY-MM-DD');
      if (feed.read && moment(feed.updated).isBefore(time) && !feed.star) {
        feed.destroy();
      } else {
        if (feed.updated) {
          feed.from_now = moment(feed.updated).fromNow();
        }
        feed.ind = i;
        i = i + 1;
        $scope.feeds.push(feed);
        if (feed.read === false) {
          u = u + 1;
        }
        if (moment().isSame(feed.updated, 'day')) {
          t = t + 1;
        }
        if (feed.star === true) {
          s = s + 1;
        }
      }
    }
    $scope.unread = u;
    $scope.today = t;
    $scope.starred = s;
    $scope.feeds.sort(function(a, b) {
      if (moment(a.updated).isAfter(b.updated)) {
        return -1;
      } else {
        return 1;
      }
    });
    $scope.app_loading = false;
    $scope.list = $scope.feeds.slice(0, per_page * $scope.page);
    if ($scope.current_item === null && $scope.list.length !== 0) {
      $scope.current_item = $scope.change_current($scope.list[0]);
    }
    paginator.all = {
      page: 1,
      total: $scope.feeds.length
    };
    return $scope.safeApply();
  };
  $scope.load();
  $scope.load_more = function() {
    var pager;
    pager = get_page($scope.channel);
    if (per_page * pager.page > $scope.feeds.length) {
      $('#app_hint').text('No More').fadeIn(1500).fadeOut();
      return false;
    }
    set_page($scope.channel, pager.page + 1);
    return $scope.list = $scope.feeds.slice(0, per_page * (pager.page + 1));
  };
  $scope.star = function(item) {
    item.star = true;
    item.save();
    return $scope.starred = $scope.starred + 1;
  };
  $scope.unstar = function(item) {
    item.star = false;
    item.save();
    return $scope.starred -= 1;
  };
  set_page = function(key, page, total) {
    console.log(key + '+' + page);
    if (!total) {
      total = get_page(key).total;
    }
    return paginator[key] = {
      'page': page,
      'total': total
    };
  };
  get_page = function(key) {
    if (!paginator[key]) {
      paginator[key] = {
        'page': 1,
        'total': $scope.feeds.length
      };
    }
    return paginator[key];
  };
  $scope.filter_status = function(status, obj, index) {
    var channel, feed, filter, _i, _len, _ref;
    channel = status;
    filter = [];
    _ref = FeedItem.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      feed = _ref[_i];
      switch (status) {
        case 'unread':
          if (!feed.read) {
            filter.push(feed);
          }
          break;
        case 'today':
          if (moment().isSame(feed.updated, 'day')) {
            filter.push(feed);
          }
          break;
        case 'star':
          if (feed.star) {
            filter.push(feed);
          }
          break;
        case 'site':
          if (feed.site === obj.title) {
            filter.push(feed);
          }
          channel = 'site_' + index;
      }
      if (feed.updated) {
        feed.from_now = moment(feed.updated).fromNow();
      }
    }
    $scope.channel = channel;
    $scope.selected_site = obj;
    filter.sort(function(a, b) {
      if (moment(a.updated).isAfter(b.updated)) {
        return -1;
      } else {
        return 1;
      }
    });
    if (paginator[channel]) {
      $scope.list = filter.slice(0, per_page * paginator[channel].page);
    } else {
      $scope.list = filter.slice(0, per_page);
      set_page(channel, 1, filter.length);
    }
    $scope.feeds = filter;
    if ($scope.current_item === null && $scope.feeds.length !== 0) {
      $scope.current_item = $scope.change_current($scope.feeds[0]);
    }
    return angular.element(this).addClass('selected');
  };
  $scope.add_feed_site = function() {
    var address;
    address = $("#rss_address").val();
    console.log(address);
    load_rss_feed(address);
    $scope.app_loading = false;
    $('#rss_address').val('');
    return window.location.href = window.location.href + '#!';
  };
  $scope.del_feed = function(feed) {
    var feedItem, index, list_index, show;
    feedItem = FeedItem.findByAttribute('link', feed.link);
    index = $scope.feeds.indexOf(feed);
    list_index = $scope.list.indexOf(feed);
    $scope.feeds.splice(index, 1);
    $scope.list.splice(list_index, 1);
    if (feed.star && $scope.starred > 0) {
      $scope.starred--;
    }
    if (moment().isSame(feed.updated, 'day') && $scope.today > 0) {
      $scope.today--;
    }
    feedItem.destroy();
    show = index < $scope.feeds.length && $scope.feeds.length > 0 ? index : index - 1;
    $scope.current_item = $scope.feeds[show];
    if ($scope.feeds.length !== 0) {
      $scope.change_current($scope.current_item);
    }
    return $scope.selectedIndex = show;
  };
  $scope.refresh = function() {
    if (!FeedSite.all().length) {
      return;
    }
    $scope.app_loading = true;
    return refresh();
  };
  $scope.remove_selected_site = function() {
    var feed, index, site, _i, _len, _ref;
    site = FeedSite.findByAttribute('link', $scope.selected_site.link);
    site.destroy();
    _ref = FeedItem.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      feed = _ref[_i];
      if (feed.site === site.title && !feed.star) {
        feed.destroy();
      }
    }
    index = $scope.sites.indexOf($scope.selected_site);
    $scope.sites.splice(index, 1);
    return $scope.load();
  };
  if ($scope.current_item === null && $scope.feeds.length !== 0) {
    return $scope.current_item = $scope.change_current($scope.feeds[0]);
  } else if ($scope.feeds.length === 0) {
    obj = {
      'link': "http://nimbusbase.com",
      'title': "Add some feeds!",
      'display': "Welcome to JellyReader. To add some feeds to your RSS. Click Add Feed and put in a website or blog URL. <br /> <img src='landingpage_logo.png' />",
      'author': "Ray Wang",
      'display_date': moment().format("MMMM Do YYYY, h:mm:ss a"),
      'feed': "http://nimbusbase.com",
      'read': false,
      'star': false,
      'site': "JellyReader"
    };
    return $scope.current_item = obj;
  }
};
