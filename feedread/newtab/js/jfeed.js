// Generated by CoffeeScript 1.6.3
var JFeed, JFeedItem, JRss, async, getFeed, sync;

Object.extend = function(destination, source) {
  var property, _i, _len;
  for (_i = 0, _len = source.length; _i < _len; _i++) {
    property = source[_i];
    destination[property] = source[property];
  }
  return destination;
};

sync = function(config, is_async) {
  var method, req;
  if (is_async) {
    is_async = true;
  } else {
    is_async = false;
  }
  if (location.href.indexOf('chrome') === -1) {
    config.url = config.url.replace('http://', "").replace('www', "");
    config.url = 'http://192.241.167.76:9292/' + config.url;
  }
  req = new XMLHttpRequest();
  method = config.method ? config.method : 'get';
  req.open('get', config.url, is_async);
  req.onreadystatechange = function() {
    if (req.readyState === 4 && req.status) {
      return config.success(req.response);
    }
  };
  return req.send(null);
};

async = function(config) {
  return sync(config, true);
};

getFeed = function(options) {
  var config;
  if (options.url) {
    config = {
      type: 'GET',
      url: options.url,
      dataType: "xml",
      success: function(xml) {
        var feed;
        feed = new JFeed(xml);
        if (jQuery.isFn(options.success)) {
          return options.success(feed);
        }
      }
    };
    return async(config);
  }
};

JFeed = (function() {
  function JFeed(xml) {
    if (xml) {
      this.parse(xml);
    }
  }

  return JFeed;

})();

JFeed.prototype = {
  type: '',
  version: '',
  title: '',
  link: '',
  description: '',
  parse: function(xml) {
    var feedClass;
    if (xml.indexOf('<channel>') > 0) {
      this.type = 'rss';
      feedClass = new JRss(xml);
    }
    return $.extend(this, feedClass);
  }
};

JFeedItem = (function() {
  function JFeedItem() {}

  return JFeedItem;

})();

JFeedItem.prototype = {
  title: '',
  link: '',
  description: '',
  updated: '',
  id: '',
  author: ''
};

JRss = (function() {
  function JRss(xml) {
    this._parse(xml);
  }

  return JRss;

})();

JRss.prototype = {
  _parse: function(xml) {
    var channel, doc_node, feed, item, row, xml_doc, _i, _len, _ref;
    xml_doc = new XMLDoc(xml);
    doc_node = xml_doc.docNode;
    if (!doc_node.getElements('rss')) {
      this.version = '1.0';
    } else {
      this.version = '2.0';
    }
    channel = doc_node.getElements('channel')[0];
    this.title = channel.getElements('title')[0].getText();
    this.link = channel.getElements('link')[0].getText();
    this.description = channel.getElements('description')[0].getText();
    if (channel.getElements('lastBuildDate')[0]) {
      this.updated = channel.getElements('lastBuildDate')[0].getText();
    }
    feed = this;
    feed.items = [];
    if (!channel.getElements('item').length) {
      return feed;
    }
    _ref = channel.getElements('item');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      row = _ref[_i];
      item = new JFeedItem();
      item.title = row.getElements('title')[0].getText();
      item.link = row.getElements('link')[0].getText();
      item.description = row.getElements('description')[0].getText();
      if (row.getElements('pubDate')[0]) {
        item.updated = row.getElements('pubDate')[0].getText();
      }
      if (row.getElements('guid')[0]) {
        item.id = row.getElements('guid')[0].getText();
      }
      if (row.getElements('dc:creator')[0]) {
        item.author = row.getElements('dc:creator')[0].getText();
      } else if (row.getElements('author')[0]) {
        item.author = row.getElements('author')[0].getText();
      }
      if (row.getElements('content:encoded')[0]) {
        item.content = row.getElements('content:encoded')[0].getText();
      } else {
        item.content = row.getElements('description')[0].getText();
      }
      if (row.getElements('dc:date')[0]) {
        item.updated = row.getElements('dc:date')[0].getText();
      }
      feed.items.push(item);
    }
    return feed;
  }
};
